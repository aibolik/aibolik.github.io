{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/creating-toast-api-with-react-hooks","webpackCompilationHash":"0fe41f605bbd9246129a","result":{"data":{"contentfulBlogPost":{"title":"Creating Toast API with React Hooks","slug":"creating-toast-api-with-react-hooks","showNewsletterPromotion":false,"show30dayReactPromotion":true,"publishDate":"1578855600000","content":[{"__typename":"ContentfulBlogPostCopy","id":"de7c019b-8396-5535-8635-86868bc48575","copy":{"childMarkdownRemark":{"html":"<p>In this blog post we will be gradually creating fully working Toast API and we will use advantages of React Hooks to create nicer hooks-supported interface. Full working example is available <a href=\"https://codesandbox.io/s/awesome-engelbart-cwyqh?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\">here</a>. </p>"}}},{"__typename":"ContentfulBlogPostImage","id":"642577e6-2ca7-5b42-82d5-e62febd47a45","caption":"Example of shown toast notification","image":{"resolutions":{"src":"//images.ctfassets.net/w1fxlmsi3y1l/5YvjYmfYGdZ81zbnvMEc4N/78024be15a0b2c8f80f66c99041ab8f3/image.png?w=400&q=100","srcSet":"//images.ctfassets.net/w1fxlmsi3y1l/5YvjYmfYGdZ81zbnvMEc4N/78024be15a0b2c8f80f66c99041ab8f3/image.png?w=400&h=64&q=100 1x,\n//images.ctfassets.net/w1fxlmsi3y1l/5YvjYmfYGdZ81zbnvMEc4N/78024be15a0b2c8f80f66c99041ab8f3/image.png?w=600&h=96&q=100 1.5x,\n//images.ctfassets.net/w1fxlmsi3y1l/5YvjYmfYGdZ81zbnvMEc4N/78024be15a0b2c8f80f66c99041ab8f3/image.png?w=800&h=128&q=100 2x,\n//images.ctfassets.net/w1fxlmsi3y1l/5YvjYmfYGdZ81zbnvMEc4N/78024be15a0b2c8f80f66c99041ab8f3/image.png?w=1200&h=193&q=100 3x"}}},{"__typename":"ContentfulBlogPostCopy","id":"d1847726-40f2-5e3e-a59d-0f62e17c599b","copy":{"childMarkdownRemark":{"html":"<h2>Toast component</h2>\n<p>Let's start by creating simple Toast component. It should be simple nice looking box that renders some content. For simplicity of this application, let that content be just a text.</p>\n<blockquote>\n<p>I will use <a href=\"https://www.styled-components.com/\"><code class=\"language-text\">styled-components</code></a> in this example for styling.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n  margin-right: 16px;\n  margin-top: 16px;\n  width: 200px;\n\n  position: relative;\n  padding: 16px;\n  border: 1px solid #d7d7d7;\n  border-radius: 3px;\n  background: white;\n  box-shadow: 0px 4px 10px 0px #d7d7d7;\n  color: #494e5c;\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Toast</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Wrapper</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Wrapper</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we have basic Toast, you can test it out by rendering <code class=\"language-text\">&lt;Toast&gt;Example&lt;/Toast&gt;</code> in your root component(<code class=\"language-text\">App.js</code>). </p>\n<h2>ToastContainer component</h2>\n<p>Usually, there can be several toasts at the same time and they are positioned at some corner of the page. Therefore, it makes sense to create <code class=\"language-text\">ToastContainer</code> component, that will be responsible for toasts positioning and rendering them in a sequence. </p>\n<blockquote>\n<p>For simplicity, let's assume that toast notifications will always be rendered at top right corner. If you want it to be more customizable, <code class=\"language-text\">ToastContainer</code> is a right place for this.</p>\n</blockquote>\n<p>Additionally, in order to not mess with z-index, it is better to render components like toasts somewhere up in a DOM tree. In our example we will render them directly inside <code class=\"language-text\">body</code> of the page. We can easily accomplish this using <a href=\"https://reactjs.org/docs/portals.html\">ReactDOM's <code class=\"language-text\">createPortal</code> API</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n  position: absolute;\n  /* Top right corner */\n  right: 0;\n  top: 0;\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToastContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> toasts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Wrapper</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>toasts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toast</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>toast<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Toast</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Wrapper</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span>body\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inside of wrapper we render array of toasts. We assume that <code class=\"language-text\">toasts</code> is an array of objects with <code class=\"language-text\">id</code> and <code class=\"language-text\">content</code> keys. <code class=\"language-text\">id</code> is a unique ID of each toast notification that we will use later to dismiss it, and <code class=\"language-text\">content</code> is just a text.</p>\n<h2>ToastProvider</h2>\n<p>We built <code class=\"language-text\">Toast</code> and <code class=\"language-text\">ToastContainer</code> components, but we will not expose them directly. Instead, we will expose them through <code class=\"language-text\">ToastProvider</code> component, that will be responsible for rendering and managing all toasts. If we were building some library or package, <code class=\"language-text\">ToastProvider</code> would be the one exported and exposed to its consumers(of course along with hooks). </p>\n<p>Since it should hold all toasts, let's use React's <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"language-text\">useState</code> hook</a> to save and manage toasts array.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToastProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toasts<span class=\"token punctuation\">,</span> setToasts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ToastProvider</code> will also use <a href=\"https://reactjs.org/docs/context.html\">React's context API</a> to pass helper functions down the tree: <code class=\"language-text\">addToast</code> and <code class=\"language-text\">removeToast</code>. </p>\n<h3><code class=\"language-text\">addToast</code> function</h3>\n<p>This function should add toast object into <code class=\"language-text\">toasts</code> array in <code class=\"language-text\">ToastProvider</code>. So it's usage will look like this: <code class=\"language-text\">addToast(&#39;You friend John liked your photo&#39;)</code>. As you can see, it should take a string as an argument, that will end up being <code class=\"language-text\">content</code>. Assigning of ID will be responsibility of the function, therefore we need some way of tracking unique IDs. For simplicity, we can have global variable <code class=\"language-text\">id</code> that will be incremented on each function call. Let's see how the function would look:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToastProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token keyword\">const</span> addToast <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToasts</span><span class=\"token punctuation\">(</span>toasts <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>toasts<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setToasts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note the usage of <a href=\"https://reactjs.org/docs/hooks-reference.html#functional-updates\">functional update</a> of <code class=\"language-text\">setToasts</code>. We need to use that, since new toasts array is computed using previous state.</p>\n</blockquote>\n<p>I used <code class=\"language-text\">useCallback</code>, as a small optimization. We don't need to recreate this function on every render, therefore we use <code class=\"language-text\">useCallback</code> hook. Read more about it in <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">React's hooks documentation</a>.</p>\n<h3><code class=\"language-text\">removeToast</code> function</h3>\n<p>Contrary to <code class=\"language-text\">addToast</code>, this function should remove toast object from <code class=\"language-text\">toasts</code> array in <code class=\"language-text\">ToastProvider</code> component given the ID of a toast. Guess where this function should be called from... from anywhere where ID is known! Remember we added <code class=\"language-text\">id</code> prop to <code class=\"language-text\">Toast</code> component? We will use that <code class=\"language-text\">id</code> to call <code class=\"language-text\">removeToast</code>. Let's see this function's code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToastProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> addToast <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToasts</span><span class=\"token punctuation\">(</span>toasts <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>toasts<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setToasts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> removeToast <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToasts</span><span class=\"token punctuation\">(</span>toasts <span class=\"token operator\">=></span> toasts<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setToasts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Very simple function - we just filter out the dismissed toast by its ID.</p>\n<p>We are almost done with <code class=\"language-text\">ToastProvider</code> component. Let's put everything together and see how it would look:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ToastContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToastProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toasts<span class=\"token punctuation\">,</span> setToasts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> addToast <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToasts</span><span class=\"token punctuation\">(</span>toasts <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>toasts<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setToasts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> removeToast <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToasts</span><span class=\"token punctuation\">(</span>toasts <span class=\"token operator\">=></span> toasts<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setToasts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ToastContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> addToast<span class=\"token punctuation\">,</span> removeToast <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ToastContainer</span> <span class=\"token attr-name\">toasts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>toasts<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ToastContext.Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing new in this code: we just added <code class=\"language-text\">ToastContext</code>, so that <code class=\"language-text\">addToast</code> and <code class=\"language-text\">removeToast</code> can be used anywhere down the React tree. Then we render <code class=\"language-text\">ToastContainer</code>, that will be rendered always inside <code class=\"language-text\">body</code> of page, thanks to <a href=\"https://reactjs.org/docs/portals.html\">Portals</a>. And <code class=\"language-text\">children</code>, since <code class=\"language-text\">ToastProvider</code> is rendered at the top level of React tree(along with other providers, e.g. Redux's Provider, <code class=\"language-text\">ThemeProvider</code>, etc.).</p>\n<h3><code class=\"language-text\">useToast</code> hook</h3>\n<p>Finally we reached to creating our own hook, that will be exported along with <code class=\"language-text\">ToastProvider</code>. This hook is actually very simple and consists of only 2 lines of code. It's purpose is to make <code class=\"language-text\">addToast</code> and <code class=\"language-text\">removeToast</code> available with just a function/hook call. Without this hook, you'd use <code class=\"language-text\">addToast</code> and <code class=\"language-text\">removeToast</code> by importing <code class=\"language-text\">ToastContext</code> and usage of <code class=\"language-text\">React.useContext</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ToastContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> '<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>ToastProvider`<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addToast <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ToastContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Let's implement this simple hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> toastHelpers <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ToastContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> toastHelpers<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We don't need to import <code class=\"language-text\">ToastContext</code> because this hook resides along with it in <code class=\"language-text\">ToastProvider</code> component. And now we can simply call it like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addToast <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Dismissing toasts with timeout</h2>\n<p>We can add toasts with <code class=\"language-text\">addToast</code> and now they need to be automatically dismissed. I think the right place for this is a <code class=\"language-text\">Toast</code> component, since it is aware of its own lifecycle and aware of ID sent to it as props.</p>\n<p>We need to fire a <code class=\"language-text\">setTimeout</code> with a call to <code class=\"language-text\">removeToast</code> after delay. The best way we can do this is using <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\"><code class=\"language-text\">useEffect</code> hook</a>.</p>\n<blockquote>\n<p>Side note about <code class=\"language-text\">useEffect</code>: it will run passed callback function whenever one of dependencies changes. </p>\n</blockquote>\n<p>So, we will use <code class=\"language-text\">removeToast</code> and <code class=\"language-text\">id</code> in dependencies list for this <em>effect</em>, since everything used inside the function should be passed as a dependency. We assume(and know) that <code class=\"language-text\">id</code> and <code class=\"language-text\">removeToast</code> function won't change, that means the <em>effect</em> will only be called upon first render. Let's see how it looks in code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Toast</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> removeToast <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">removeToast</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// delay</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> removeToast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...render toast content as before...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note the <a href=\"https://reactjs.org/docs/hooks-reference.html#cleaning-up-an-effect\">clean up function</a> in <code class=\"language-text\">useEffect</code>: we need to clean up timer, so that it won't cause errors in case of unexpected removal of component.</p>\n</blockquote>\n<p>That's it! Now it works as expected. Feel free to play with the demo in <a href=\"https://codesandbox.io/s/awesome-engelbart-cwyqh?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\">CodeSandbox</a>.</p>"}}},{"__typename":"ContentfulBlogPostEmbedCodeSandbox","id":"82b8167b-c0bf-5a4c-a159-5085c6517d5c","title":"Toast API with React hooks","embedUrl":"https://codesandbox.io/embed/toast-api-with-react-hooks-cwyqh?autoresize=1&fontsize=14&hidenavigation=1&theme=dark"},{"__typename":"ContentfulBlogPostCopy","id":"a965e717-4a35-57cb-8991-81dfc20473ce","copy":{"childMarkdownRemark":{"html":"<p>If you want to go further and practice more you can try enhancing it by adding some more customisation. For example by configuring <code class=\"language-text\">delay</code>, render position, styling and more. Most likely <code class=\"language-text\">ToastProvider</code> is the best place for that, since it is exposed to consumer and renders all other components. </p>\n<blockquote>\n<p>If you liked the post check out my upcoming course <a href=\"https://aibolik.github.io/30-day-react\" title=\"30-day-React course\"><strong>30-day-React</strong></a>. There you can practice more alike examples in a video format. It is still in progress, therefore I will give away the course for free when it is released to first 100 people who signs up now. Just fill in the form below and you will get it when it is ready.</p>\n</blockquote>"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"creating-toast-api-with-react-hooks"}}}