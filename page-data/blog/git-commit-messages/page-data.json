{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/git-commit-messages","webpackCompilationHash":"380424bee754334612a1","result":{"data":{"contentfulBlogPost":{"title":"Git commit messages","slug":"git-commit-messages","publishDate":"1545253200000","content":[{"__typename":"ContentfulBlogPostCopy","id":"27da8391-1758-57f5-8ca5-aa50e3f7fbf9","copy":{"childMarkdownRemark":{"html":"<p>I managed to write this post long time ago, but just now I found some time to write it. I want to cover the thing that every active developer faces everyday probably multiple times from 1 to 10, 20, 30 times a day. So I will talk about <strong>Git commit messages</strong>. </p>\n<p>There are probably many articles covering this topic, anyway I don't want to force my vision how this should be handled, but instead share some practices I acquired from <em>seeing problem in this area</em>, <em>looking for some solutions</em> and <em>applying them in practice</em>. </p>\n<p>Main source of knowledge was <a href=\"https://anvilabs.co/blog/writing-practical-commit-messages/\">article of one company</a> practicing writing commit messages as in AngularJS library. Here is their <a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit\">Git commit message conventions</a>. I will add some more points to it as well as summarizing their message.</p>\n<h3>Identifying problem</h3>"}}},{"__typename":"ContentfulBlogPostImage","id":"5c1d7091-b150-5eb0-8f7b-8cbf139130a1","caption":"Worst commit messages","image":{"resolutions":{"src":"//images.ctfassets.net/w1fxlmsi3y1l/5Tl26UcojC8imk06GS6KaK/28ace52aa5dca238ae650e8b9c8b7ba2/git_commit_2x.png?w=400&q=100","srcSet":"//images.ctfassets.net/w1fxlmsi3y1l/5Tl26UcojC8imk06GS6KaK/28ace52aa5dca238ae650e8b9c8b7ba2/git_commit_2x.png?w=400&h=228&q=100 1x,\n//images.ctfassets.net/w1fxlmsi3y1l/5Tl26UcojC8imk06GS6KaK/28ace52aa5dca238ae650e8b9c8b7ba2/git_commit_2x.png?w=600&h=342&q=100 1.5x,\n//images.ctfassets.net/w1fxlmsi3y1l/5Tl26UcojC8imk06GS6KaK/28ace52aa5dca238ae650e8b9c8b7ba2/git_commit_2x.png?w=800&h=456&q=100 2x"}}},{"__typename":"ContentfulBlogPostCopy","id":"823ad5f1-df79-5b4c-9eb9-cb3a8c71e1f8","copy":{"childMarkdownRemark":{"html":"<p>If you search for <em>worst commit messages</em> you can find many examples. I hope you don't, but just take a look <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/375fjr/whats_the_most_humorous_commit_message_youve_ever/\">here</a>. These changes don't make sense what has been done. </p>"}}},{"__typename":"ContentfulBlogPostImage","id":"f871ef12-b289-5137-ab34-517dbe7fb564","caption":"Example of commit messages from Angular project ","image":{"resolutions":{"src":"//images.ctfassets.net/w1fxlmsi3y1l/4Wx8X8TeMEeimWmew4EYiu/44bc3b2d03aefad707b9933ac0db5608/Screen_Shot_2018-12-20_at_8.21.11_AM.png?w=400&q=100","srcSet":"//images.ctfassets.net/w1fxlmsi3y1l/4Wx8X8TeMEeimWmew4EYiu/44bc3b2d03aefad707b9933ac0db5608/Screen_Shot_2018-12-20_at_8.21.11_AM.png?w=400&h=253&q=100 1x,\n//images.ctfassets.net/w1fxlmsi3y1l/4Wx8X8TeMEeimWmew4EYiu/44bc3b2d03aefad707b9933ac0db5608/Screen_Shot_2018-12-20_at_8.21.11_AM.png?w=600&h=380&q=100 1.5x,\n//images.ctfassets.net/w1fxlmsi3y1l/4Wx8X8TeMEeimWmew4EYiu/44bc3b2d03aefad707b9933ac0db5608/Screen_Shot_2018-12-20_at_8.21.11_AM.png?w=800&h=506&q=100 2x,\n//images.ctfassets.net/w1fxlmsi3y1l/4Wx8X8TeMEeimWmew4EYiu/44bc3b2d03aefad707b9933ac0db5608/Screen_Shot_2018-12-20_at_8.21.11_AM.png?w=1200&h=760&q=100 3x"}}},{"__typename":"ContentfulBlogPostCopy","id":"04ad219a-d1bd-5b97-9bfc-93379db82d11","copy":{"childMarkdownRemark":{"html":"<p>But there are some better messages, those make sense what has been done. However, sometimes there is no <em><strong>context</strong></em> in them - where the change was applied. Of course you can take a look at what has changed, but isn't it faster just to read one line, rather than inspecting bunch of changed lines?</p>\n<p>So, there is a defintely a problem. I will share some my suggestions how it should be handled, and then some resources where from I adopted some practices and modified some.</p>\n<h3>Adopted practices</h3>\n<h4>Use editor, not CLI</h4>\n<p>This one is probably obvious at the same time a little bit time consuming, but it is really easier to write in some editor, rather than writing everything in one line in CLI after <code class=\"language-text\">git commit -m &quot;...&quot;</code>. </p>\n<p>Set it to your favorite editor, but keep in mind that some <em>visually rich</em> editors(like VSCode) might have useful plugins those will hint on some best practices.</p>\n<p>To change default editor configuration for your git, write this command:</p>\n<p><code class=\"language-text\">git config --global core.editor &quot;code --wait&quot;</code></p>\n<p>This will set VSCode as a default editor for commit messages.</p>\n<blockquote>\n<p><em><strong>Note</strong></em>: you should have VSCode configured to run from CLI.</p>\n</blockquote>\n<p>As a bonus, in VSCode you will also see staged files as a comment in <code class=\"language-text\">COMMIT_MSG</code>, those will be ignored in original commit. Additionally there is a built-in plugin, that will show when your commit message length is getting too long.</p>\n<h4>Structure your first line</h4>\n<p>Probably you have already seen some structures for commit messages. I propse you to take a look at <a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit\">AngularJS Git Commit Message Conventions</a>. Here are key takeaways about subject line:</p>\n<ul>\n<li>\n<p>your commit message should consist of 3 parts</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">&lt;type&gt;</code> - the type of the made changes. Should be one of:</p>\n<ul>\n<li><code class=\"language-text\">feat</code> - some feature development</li>\n<li><code class=\"language-text\">fix</code> - bug fix</li>\n<li><code class=\"language-text\">docs</code> - changes in documentation</li>\n<li><code class=\"language-text\">style</code> - formatting changes</li>\n<li><code class=\"language-text\">refactor</code> - changes those do not fix a bug or implement a feature. Simple refactoring</li>\n<li><code class=\"language-text\">test</code> - changes to tests or addition of new ones</li>\n<li><code class=\"language-text\">chore</code> - any other changes, not affecting code</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;scope&gt;</code> - here you define the scope of changes. For example: featureA, buildConfig, or any other scope you can think of.</li>\n<li>\n<p><code class=\"language-text\">&lt;subject&gt;</code> - there are different methodologies to write the subject, but the main rules are as follows:</p>\n<ul>\n<li>use imperative, present tense. \"fix\" not \"fixed\", \"add\" not \"added\". By the way, Git also uses this convention for its own preformateed messages(\"Merge pull request...\").</li>\n<li>don't capitalize first letter</li>\n<li>do not add dot(.) at the end of subject</li>\n</ul>\n</li>\n</ul>\n<p>At first it might be harder to maintain this style, but you will get used to. If you are having troubles remembering all of these you can use library that does it for you. Take a look at <a href=\"http://commitizen.github.io/cz-cli/\">commitizen</a>.</p>\n<blockquote>\n<p>Sometimes, you might want more type of changes. In this case feel free to add up more, just be sure to coordinate it with the team and document it somewhere.</p>\n</blockquote>\n<h4>Add message body and footer when necessary</h4>\n<p>In some cases you probably want to leave more clues in your commit message. For this purpose use message body. It typically goes after subject line and is divided from it by one empty line. It should also follow the rule of using imperative tense in verbs.</p>\n<p>Footer is mostly ignored, but in some cases it can be useful to add up some meta information. You can use it to mention <em>breaking changes</em> and list the issues it closes in your issue tracker. For examples: <em>Closes #132, #123</em>.</p>\n<p>Here are examples from AngularJS project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">feat($browser): onUrlChange event (popstate/hashchange/polling)\n\nAdded new event to $browser:\n- forward popstate event if available\n- forward hashchange event if popstate not available\n- do polling when neither popstate nor hashchange available\n\nBreaks $browser.onHashChange, which was removed (use onUrlChange instead)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fix($compile): couple of unit tests for IE9\n\nOlder IEs serialize html uppercased, but IE9 does not...\nWould be better to expect case insensitive, unfortunately jasmine does\nnot allow to user regexps for throw expectations.\n\nCloses #392\nBreaks foo.bar api, foo.baz should be used instead</code></pre></div>\n<h3>Conclusion</h3>\n<p>These are mostly recommendations - not a strict policy. You would probably want to adjust these practices to your own needs. Finally, it is your project, your repository, your code - setup your own guidelines and stick to them. If this article was helpful I reached my goal. Thanks for reading!</p>\n<h4>Resources</h4>\n<ul>\n<li><a href=\"https://anvilabs.co/blog/writing-practical-commit-messages/\">AnviLabs: Writing practical commit messages</a></li>\n<li><a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit\">AngularJS Git Commit Message Conventions</a></li>\n<li><a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/375fjr/whats_the_most_humorous_commit_message_youve_ever/\">Reddit Topic about worst commit messages</a></li>\n<li><a href=\"http://commitizen.github.io/cz-cli/\">Commitizen</a></li>\n<li><a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">A Note About Git Commit Messages</a></li>\n<li><a href=\"http://365git.tumblr.com/post/3308646748/writing-git-commit-messages\">Writing Git commit messages</a></li>\n</ul>"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"git-commit-messages"}}}