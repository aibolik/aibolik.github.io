{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"0fe41f605bbd9246129a","result":{"data":{"allContentfulBlogPost":{"edges":[{"node":{"id":"61deea4d-c32f-53ee-89cd-0f211c4a5c74","title":"Creating Toast API with React Hooks","slug":"creating-toast-api-with-react-hooks","publishDate":"1578855600000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"In this blog post we will be gradually creating fully working Toast API and we will use advantages of React Hooks to create nicer hooks-supported interface. Full working example is available  here . "}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Toast component Let's start by creating simple Toast component. It should be simple nice looking box that renders some content. For simplicity of this application, let that content be just a text. I will use   in this example for styling. Now we have…"}}},{"__typename":"ContentfulBlogPostEmbedCodeSandbox"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"If you want to go further and practice more you can try enhancing it by adding some more customisation. For example by configuring  , render position, styling and more. Most likely   is the best place for that, since it is exposed to consumer and…"}}}]}},{"node":{"id":"759cbbce-2719-52c5-a10f-801b8b6a150b","title":"Git commit messages","slug":"git-commit-messages","publishDate":"1545253200000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"I managed to write this post long time ago, but just now I found some time to write it. I want to cover the thing that every active developer faces everyday probably multiple times from 1 to 10, 20, 30 times a day. So I will talk about  Git commit…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"If you search for  worst commit messages  you can find many examples. I hope you don't, but just take a look  here . These changes don't make sense what has been done. "}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"But there are some better messages, those make sense what has been done. However, sometimes there is no  context  in them - where the change was applied. Of course you can take a look at what has changed, but isn't it faster just to read one line…"}}}]}},{"node":{"id":"bf21fc9c-6b2b-5d94-af35-fcb8d9a364ae","title":"Whom to follow to stay up to date in JS and FrontEnd world","slug":"whom-to-follow-to-stay-up-to-date-in-js-and-frontend-world","publishDate":"1539723600000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Hi, developer folks. In this post I want to share whom I follow and admire in tech world to stay up to date with all tendencies and other cool stuffs they share. Since I am mostly JavaScript/FrontEnd developer, this list will contain people mostly…"}}}]}},{"node":{"id":"2440602f-8b6e-56c3-85f1-4447b092977a","title":"Create your own virtual DOM to understand it (Part 2)","slug":"create-your-own-virtual-dom-to-understand-it-part-2","publishDate":"1532811600000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"This article is the continuation of first part(so you better read  first part  too :), where we learnt how to create virtual nodes with JSX-like function  hyperscript  and render them. In this part we will implement  “diffing” algorithm  of virtual…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Nothing special with this component: it just renders list of items that is given in its props.  Note : we introduced   method here — it actually creates virtual DOM that we use to render real DOM. And here is how our  App component  will change:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Two things to mention here: We set its state in its constructor and create  timer,  that updates its state every 1 second(1000ms) We call   method to update its state. You can find what does   method in  React’s documentation . We will implement…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Basically, we just initiate our component with   and   fields and implement   method that basically rewrites our state and calls   with itself in its parameters. I’ll explain it now, but first of all let’s make changes to our components:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Okay, now we have our  App  and  People  components updated I’ll try to explain what   should do. It grabs the old base(current DOM before change that is saved in component.base) Renders virtual DOM — that we can get from  component.render  method…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"I’ve added parent parameter, to that we could use   when we render the root component first time. One little change to make it perfect is to change a little bit   function. Remember how it looked before:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"It only handles DOM elements, but actually we have something like this in our  App component’s    method: As you can see   can take not only string values, but also another component/function to render, in our case this is  People component . We need…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"That’s it about rendering! Now our app works perfectly: any state change will cause app to re-render — as a result every child element/component will be updated. To leverage from this approach let’s move update operation in our application from  App…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"And update   method of People from this:   to this  Now only  People component  will be re-rendered when its state updates. Compare these GIFs:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"As you can see only the list updates, while the headline(Simple vDOM) does not re-render. Now we made our components  Autonomous. Note 1 : I’ve changes a bit styles: displayed items in  flex  row, so that adding new items will not cause reflow.\n Note…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"This is applicable for the  first run  — where there is no DOM rendered yet, and the only place where we give parent in its parameters. So we can use it for initial rendering, here how we will do it:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Okay, now we rendered our app, the  People component  will update its state after 1 second(remember the  timer  we set?). That will cause our   to be called, so it will also be changed:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Firstly, we create the virtual DOM with   method, then we just compare it with its current DOM state(that we saved in   field), and save the result of   in it again. So our   function should check if there are any new child, and in case it is true…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"That’s it, we made it! Now take a look how it looks in our 3rd iteration:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"As you can see the whole application and list do not re-render. Only the new child is added to list. This is just a simple example with simple “ diffing” algorithm,  but  hopefully  it will  make sense for those who are new to these concept* . *It…"}}}]}},{"node":{"id":"d5bfb42e-1d01-53ed-9c70-e3f9a45d7ab4","title":"Create your own virtual DOM to understand it (Part 1)","slug":"create-your-own-virtual-dom-to-understand-it-part-1","publishDate":"1532552400000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"In this article I want to recap my experience creating own “virtual DOM”. Sounds too ambitiously? Probably, but it is not that complicated as you might think. As the title states, it will make sense when you create your own, rather than reading…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Firstly, It simply creates DOM element with *nodeName. *Secondly, sets its attributes, and last step to append child nodes with the check for text nodes. Note:  actually, we could go further and render children recursively, but I left this for later…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Creating application with Hyperscript Okay, we now can create simple application with the help of Hyperscript. Let’s create a bit more complex application than it was in previous step. Here is our newer  App  function."}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"When the  App  is executed it creates a  div , with two children: one rendering H1 heading, and the second one unordered list. Note that we pass  props  to our function and render  props.list  into unordered list. Let’s add some more rendering magic:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Generally, we just want to render the output of  App  function(that is valid DOM) into the body of document giving the state that contains emojis list."}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"It wasn’t that hard. Is it?  Let’s add some dynamic content, and add random emoji every 1 second this way we can see how our app renders."}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Implement vDOM rendering Okay, now we have dynamic app done with  hyperscript  let’s move on to actual virtual DOM and its implementation. First of all we need to change our  hyperscript  function. Now it should not create real DOM, but instead it…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"We have a virtual DOM and if we execute the App function with same emojis list we get something like this(logged in console):"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Pretty similar to DOM. Now let’s create a function that renders virtual DOM into real DOM. As you might have guessed it should take virtual Node as a parameter. Here it is:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Let me explain what it does step by step: Using destructuring we retrieve nodeName, attributes and children of virtual Node If vnode is text(we can check it by  vnode.split ) then we return text Node Otherwise we create an element with nodeName and…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"This article became a bit longer than I thought, so I decided to break into two parts. So, let’s recap this. We created a  hyperscript —   virtual DOM factory ,  renderNode  —  that turns virtual DOM into DOM element  and a  function component   App…"}}}]}},{"node":{"id":"4b7fc68b-b444-50d6-81e4-e20965b4bcc4","title":"My Programming Experience","slug":"my-programming-experience","publishDate":"1500411600000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Hi, there! I will begin with explaining how I started my way in programming. In the far 2008th , I entered to Kazakh-Turkish High School for gifted students. All Kazakh-Turkish Schools in our country make a big emphasis on subject Olympiads. Our…"}}}]}},{"node":{"id":"d4023360-4363-5b53-acba-ee2330fd532e","title":"How To Create Chrome Extension In 5 Minutes","slug":"how-to-create-chrome-extension-in-5-minutes","publishDate":"1461013200000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"First of all , what is a Chrome Extension? Let’s look what  Wikipedia says about it . Google Chrome Extensions are browser extensions that modify the Google Chrome browser. These extensions are written using web technologies like HTML, JavaScript…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Step 1 Using  this  GitHub repo and the Docs provided there we generate chrome extension package. Here is shortly what we do: Note that, when generating chrome-extension with yeoman, we need to choose Browser Action, as we modify browser content Step…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"You can see the whole code in  my GitHub repo."}}}]}},{"node":{"id":"51adc9f3-23b2-5b5b-a9af-52c9ed3f8bf7","title":"First Hackathon In Our Alma Mater","slug":"first-hackathon-in-our-alma-mater","publishDate":"1459890000000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Last week ,  My Alma Mater  handled first Hackathon for 2nd and 3rd year students of Information Systems department. That was first experience making Hackathon in our university, and I gotta say, it was  cool . I don't know whose idea it was, but I…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Every team got on very well,  as you can see from pictures below:"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"I also had a team, and in the beginning I distributed tasks among members of team, so that everyone had something to do.  Our project  was my idea - to create a new version of  SDU Informer . I already had a design, that I made about a year ago, so…"}}}]}},{"node":{"id":"11516c93-6f9f-542d-b149-5460787552e4","title":"How I Handled My Own Android Course","slug":"how-i-handled-my-own-android-course","publishDate":"1459026000000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"About two weeks ago I started my own Android Course called  \"Learndroid\" . How did everything begin? First of all , everything began from  Moneymaker's course , which was held in our University. The  purpose  of that course is to  start a business…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"I was planning to start course on 10th of March, and by that time I had 3 students. I said \"Okay, anyway, it is hypothesis test\", and started my course. On 3rd day of the course, 5 more students joined, but 2 of them left. And I had  6 students  at…"}}}]}},{"node":{"id":"a4a1ccb0-1348-53e5-858a-06511fee6797","title":"Udacity Android course. Recap","slug":"udacity-android-course-recap","publishDate":"1458334800000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"How’s it going? I was going to write this post last  two months , but today is the day I have time and intention to write this post. About two months ago, when I was on my winter holidays, I passed a course on  Udacity , called  Developing Android…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Here in this post, I want to  conclude  what I have done and learned throughout this course. Actually, I was writing what I have learned in each big commit, in my  GitHub repo for this course . By the end of the course, we had a built application…"}}}]}},{"node":{"id":"30abe357-723a-58da-9f0e-101ee4f36bbc","title":"Where from to get Traffic","slug":"where-from-to-get-traffic","publishDate":"1457384400000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Hi, there! About a month ago, one man came to our University and started handling one course called  “Moneymaking” (thanks to our  Head of Information Systems Department  -  Mr. Meirambek Zhaparov ). This man really knows how to  make money , and he…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"So, here is the list: VK YouTube Instagram Blog Periscope Twitter Mail.ru Email subscription yvision.kz Some other platforms(as olx, slando, satu) Google+ Odnoklassniki Offline Forums Reddit TV channels LinkedIn QA sites(Quora) RSS Feed subscription…"}}}]}},{"node":{"id":"c6d5cb62-4b27-52ec-aa5e-c4a168153161","title":"How We CopyPasted Self-Driving(RC) Car","slug":"how-we-copypasted-self-driving-rc-car","publishDate":"1452546000000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"About a month a ago, one university in our city organized event called  “Machine Learning Challenge(MLC)” . Our teacher on the Machine Learning course, encouraged us(me and my friends) to take part in this  Challenge . He also suggested us to…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Second step , here starts Machine Learning part. We had a code( from David Singleton’s Repository ) to retrieve training data for our Neural Network(on what car drives by itself). It is consist of Java Application and Android Application. Android…"}}}]}},{"node":{"id":"0f884d05-6074-5288-9fb7-3b9667bff22a","title":"Introduction","slug":"introduction","publishDate":"1451682000000","content":[{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"Hi, there! Today, I am starting this blog and will write here frequently, as I can. I hope anyone, who visits my site will get some useful information for him/herself. The platform I am using called Jekyll. You can  read more about Jekyll here . The…"}}},{"__typename":"ContentfulBlogPostImage"},{"__typename":"ContentfulBlogPostCopy","copy":{"childMarkdownRemark":{"excerpt":"So, I think that’s it for now."}}}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}