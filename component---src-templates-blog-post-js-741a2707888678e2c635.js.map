{"version":3,"sources":["webpack:///./src/components/ImageEmbed/index.js","webpack:///./src/templates/blog-post.js"],"names":["Figure","styled","figure","withConfig","displayName","componentId","ImageEmbed","_ref","image","caption","alt","react_default","a","createElement","src","resolutions","srcSet","defaultProps","StyledContent","section","props","theme","codeBackground","codeColor","media","tablet","_templateObject","desktop","_templateObject2","desktopMedium","_templateObject3","pageQuery","BlogPost","post","data","contentfulBlogPost","layout","Hero","heroImage","HeroImage","title","publishDate","content","map","contentItem","__typename","dangerouslySetInnerHTML","__html","copy","childMarkdownRemark","html","components_ImageEmbed"],"mappings":"uIAGMA,EAASC,UAAOC,OAAVC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,YAAGJ,CAAH,4HAeNK,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,QAASC,EAAnBH,EAAmBG,IAAnB,OACjBC,EAAAC,EAAAC,cAACb,EAAD,KACEW,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAMO,YAAYD,IAAKE,OAAQR,EAAMO,YAAYC,OAAQN,IAAKA,IACvED,GAAWE,EAAAC,EAAAC,cAAA,kBAAaJ,KAI7BH,EAAWW,aAAe,CACxBP,IAAK,IAGQJ,kdClBR,IAAMY,EAAgBjB,UAAOkB,QAAVhB,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAAGJ,CAAH,wdAYpB,SAAAmB,GAAK,6BACSA,EAAMC,MAAMC,eADrB,mBAEIF,EAAMC,MAAME,UAFhB,WAkBPC,IAAMC,OA9BgBC,KAkCtBF,IAAMG,QAlCgBC,KAsCtBJ,IAAMK,cAtCgBC,MA0FbC,GAFEC,UA5BE,SAAAzB,GAAA,IAA+B0B,EAA/B1B,EAAG2B,KAAQC,mBAAX,OACfxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,UAAWC,IACXC,MAAOP,EAAKO,MACZC,YAAaR,EAAKQ,cAEpB9B,EAAAC,EAAAC,cAACK,EAAD,KACGe,EAAKS,QAAQC,IAAI,SAAAC,GAChB,IAAIF,EACJ,OAAOE,EAAYC,YACjB,IAAK,yBACHH,EAAU/B,EAAAC,EAAAC,cAAA,OAAKiC,wBAAyB,CAAEC,OAAQH,EAAYI,KAAKC,oBAAoBC,QACvF,MACF,IAAK,0BACHR,EAAU/B,EAAAC,EAAAC,cAACsC,EAAD,CAAY3C,MAAOoC,EAAYpC,MAAOC,QAASmC,EAAYnC,UACrE,MACF,QACEiC,EAAU,0EAEd,OAAOA,QASK","file":"component---src-templates-blog-post-js-741a2707888678e2c635.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Figure = styled.figure`\n  margin: 16px 0;\n  text-align: center;\n\n  img {\n    width: 100%;\n  }\n\n  figcaption {\n    color: rgba(33, 33, 33, .51);\n    font-size: .8em;\n    font-style: italic;\n  }\n`\n\nconst ImageEmbed = ({ image, caption, alt }) => (\n  <Figure>\n    <img src={image.resolutions.src} srcSet={image.resolutions.srcSet} alt={alt} />\n    {caption && <figcaption>{caption}</figcaption>}\n  </Figure>\n)\n\nImageEmbed.defaultProps = {\n  alt: ''\n}\n\nexport default ImageEmbed","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Hero from '../components/Hero'\nimport ImageEmbed from '../components/ImageEmbed'\nimport HeroImage from '../assets/hero.png'\nimport styled from 'styled-components'\nimport { media } from '../helpers/style-helper'\nimport Layout from '../components/layout'\nimport 'prismjs/themes/prism-tomorrow.css'\n\n// Temporarily\nexport const StyledContent = styled.section`\n  padding: 0 16px 40px;\n\n  font-family: 'Merriweather', Helvetica, Arial, serif;\n  font-size: 1.2em;\n  line-height: 1.4;\n\n  .gatsby-highlight {\n    font-size: .8em;\n  }\n\n  *:not(pre) > code[class*=\"language-\"] {\n    ${props => `\n      background: ${props.theme.codeBackground};\n      color: ${props.theme.codeColor};\n    `}\n  }\n\n  blockquote {\n    margin: 1em 40px 1em 1em;\n    padding-left: 1em;\n    border-left: 4px solid rgba(33, 33, 33, .77);\n\n    font-style: italic;\n  }\n\n  twitterwidget {\n    margin: 10px auto;\n  }\n\n  ${media.tablet`\n    padding: 0 16px 40px 32px;\n  `}\n\n  ${media.desktop`\n    padding: 0 16px 40px 48px;\n  `}\n\n  ${media.desktopMedium`\n    padding-right: 300px;\n  `}\n\n  ul {\n    list-style: circle outside none;\n  }\n\n  a {\n    color: #765E9C;\n    text-decoration: none;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  strong {\n    font-weight: 600;\n  }\n`\n\nconst BlogPost = ({ data: { contentfulBlogPost: post } }) => (\n  <Layout>\n    <article>\n      <Hero\n        heroImage={HeroImage}\n        title={post.title}\n        publishDate={post.publishDate}\n      />\n      <StyledContent>\n        {post.content.map(contentItem => {\n          let content;\n          switch(contentItem.__typename) {\n            case 'ContentfulBlogPostCopy':\n              content = <div dangerouslySetInnerHTML={{ __html: contentItem.copy.childMarkdownRemark.html }} />\n              break\n            case 'ContentfulBlogPostImage':\n              content = <ImageEmbed image={contentItem.image} caption={contentItem.caption} />\n              break\n            default:\n              content = 'Content type is missing? Please say about it to twitter.com/aibolik_ :)'\n          }\n          return content\n        })}\n      </StyledContent>\n    </article>\n  </Layout>\n)\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    contentfulBlogPost(slug: { eq: $slug }) {\n      title\n      slug\n      publishDate(formatString: \"x\")\n      content {\n        __typename\n        ... on ContentfulBlogPostCopy {\n          id\n          copy {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n        ... on ContentfulBlogPostImage {\n          id\n          caption\n          image {\n            resolutions(quality: 100) {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}